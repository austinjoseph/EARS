
EARS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d34  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001e70  08001e70  00011e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e8c  08001e8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e8c  08001e8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e8c  08001e8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e90  08001e90  00011e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08001ea0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001ea0  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c75  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001091  00000000  00000000  00024caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004f0  00000000  00000000  00025d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000458  00000000  00000000  00026230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012f0e  00000000  00000000  00026688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004a1a  00000000  00000000  00039596  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077725  00000000  00000000  0003dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b56d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001230  00000000  00000000  000b5750  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001e58 	.word	0x08001e58

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001e58 	.word	0x08001e58

0800017c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000182:	2300      	movs	r3, #0
 8000184:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000186:	2003      	movs	r0, #3
 8000188:	f000 fd1a 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800018c:	2000      	movs	r0, #0
 800018e:	f000 f80d 	bl	80001ac <HAL_InitTick>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000198:	2301      	movs	r3, #1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	e001      	b.n	80001a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800019e:	f001 fd3d 	bl	8001c1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001a2:	79fb      	ldrb	r3, [r7, #7]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <HAL_InitTick+0x68>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d022      	beq.n	8000206 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <HAL_InitTick+0x6c>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <HAL_InitTick+0x68>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80001d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 fd1a 	bl	8000c0e <HAL_SYSTICK_Config>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d10f      	bne.n	8000200 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b0f      	cmp	r3, #15
 80001e4:	d809      	bhi.n	80001fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001e6:	2200      	movs	r2, #0
 80001e8:	6879      	ldr	r1, [r7, #4]
 80001ea:	f04f 30ff 	mov.w	r0, #4294967295
 80001ee:	f000 fcf2 	bl	8000bd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <HAL_InitTick+0x70>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	6013      	str	r3, [r2, #0]
 80001f8:	e007      	b.n	800020a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80001fa:	2301      	movs	r3, #1
 80001fc:	73fb      	strb	r3, [r7, #15]
 80001fe:	e004      	b.n	800020a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000200:	2301      	movs	r3, #1
 8000202:	73fb      	strb	r3, [r7, #15]
 8000204:	e001      	b.n	800020a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800020a:	7bfb      	ldrb	r3, [r7, #15]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000004 	.word	0x20000004
 8000218:	20000008 	.word	0x20000008
 800021c:	20000000 	.word	0x20000000

08000220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HAL_IncTick+0x1c>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_IncTick+0x20>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4413      	add	r3, r2
 800022e:	4a03      	ldr	r2, [pc, #12]	; (800023c <HAL_IncTick+0x1c>)
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000028 	.word	0x20000028
 8000240:	20000004 	.word	0x20000004

08000244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return uwTick;
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <HAL_GetTick+0x10>)
 800024a:	681b      	ldr	r3, [r3, #0]
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000260:	f7ff fff0 	bl	8000244 <HAL_GetTick>
 8000264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000270:	d004      	beq.n	800027c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <HAL_Delay+0x40>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	4413      	add	r3, r2
 800027a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800027c:	bf00      	nop
 800027e:	f7ff ffe1 	bl	8000244 <HAL_GetTick>
 8000282:	4602      	mov	r2, r0
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	1ad3      	subs	r3, r2, r3
 8000288:	68fa      	ldr	r2, [r7, #12]
 800028a:	429a      	cmp	r2, r3
 800028c:	d8f7      	bhi.n	800027e <HAL_Delay+0x26>
  {
  }
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004

0800029c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08e      	sub	sp, #56	; 0x38
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002a4:	2300      	movs	r3, #0
 80002a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d101      	bne.n	80002bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80002b8:	2301      	movs	r3, #1
 80002ba:	e127      	b.n	800050c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d115      	bne.n	80002f6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d8:	4b8e      	ldr	r3, [pc, #568]	; (8000514 <HAL_ADC_Init+0x278>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a8d      	ldr	r2, [pc, #564]	; (8000514 <HAL_ADC_Init+0x278>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6213      	str	r3, [r2, #32]
 80002e4:	4b8b      	ldr	r3, [pc, #556]	; (8000514 <HAL_ADC_Init+0x278>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f001 fcc1 	bl	8001c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	f003 0310 	and.w	r3, r3, #16
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 80ff 	bne.w	8000502 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000308:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800030c:	f023 0302 	bic.w	r3, r3, #2
 8000310:	f043 0202 	orr.w	r2, r3, #2
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000318:	4b7f      	ldr	r3, [pc, #508]	; (8000518 <HAL_ADC_Init+0x27c>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	497c      	ldr	r1, [pc, #496]	; (8000518 <HAL_ADC_Init+0x27c>)
 8000326:	4313      	orrs	r3, r2
 8000328:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000332:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800033a:	4619      	mov	r1, r3
 800033c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000340:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000342:	6a3b      	ldr	r3, [r7, #32]
 8000344:	fa93 f3a3 	rbit	r3, r3
 8000348:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	fab3 f383 	clz	r3, r3
 8000350:	b2db      	uxtb	r3, r3
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000356:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800035c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000364:	4619      	mov	r1, r3
 8000366:	2302      	movs	r3, #2
 8000368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036c:	fa93 f3a3 	rbit	r3, r3
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000374:	fab3 f383 	clz	r3, r3
 8000378:	b2db      	uxtb	r3, r3
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800037e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000382:	4313      	orrs	r3, r2
 8000384:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800038a:	2b10      	cmp	r3, #16
 800038c:	d007      	beq.n	800039e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000396:	4313      	orrs	r3, r2
 8000398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800039a:	4313      	orrs	r3, r2
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a8:	2b40      	cmp	r3, #64	; 0x40
 80003aa:	d04f      	beq.n	800044c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003b2:	4313      	orrs	r3, r2
 80003b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003be:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	6912      	ldr	r2, [r2, #16]
 80003c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80003c8:	d003      	beq.n	80003d2 <HAL_ADC_Init+0x136>
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6912      	ldr	r2, [r2, #16]
 80003ce:	2a01      	cmp	r2, #1
 80003d0:	d102      	bne.n	80003d8 <HAL_ADC_Init+0x13c>
 80003d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d6:	e000      	b.n	80003da <HAL_ADC_Init+0x13e>
 80003d8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80003da:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003de:	4313      	orrs	r3, r2
 80003e0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d125      	bne.n	8000438 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d114      	bne.n	8000420 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	3b01      	subs	r3, #1
 80003fc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000400:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000402:	69ba      	ldr	r2, [r7, #24]
 8000404:	fa92 f2a2 	rbit	r2, r2
 8000408:	617a      	str	r2, [r7, #20]
  return result;
 800040a:	697a      	ldr	r2, [r7, #20]
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	4093      	lsls	r3, r2
 8000414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800041a:	4313      	orrs	r3, r2
 800041c:	633b      	str	r3, [r7, #48]	; 0x30
 800041e:	e00b      	b.n	8000438 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000424:	f043 0220 	orr.w	r2, r3, #32
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000430:	f043 0201 	orr.w	r2, r3, #1
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	4b37      	ldr	r3, [pc, #220]	; (800051c <HAL_ADC_Init+0x280>)
 8000440:	4013      	ands	r3, r2
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	6812      	ldr	r2, [r2, #0]
 8000446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000448:	430b      	orrs	r3, r1
 800044a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	4b33      	ldr	r3, [pc, #204]	; (8000520 <HAL_ADC_Init+0x284>)
 8000454:	4013      	ands	r3, r2
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6812      	ldr	r2, [r2, #0]
 800045a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800045c:	430b      	orrs	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000468:	d003      	beq.n	8000472 <HAL_ADC_Init+0x1d6>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	691b      	ldr	r3, [r3, #16]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d119      	bne.n	80004a6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000480:	3b01      	subs	r3, #1
 8000482:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000486:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000488:	693a      	ldr	r2, [r7, #16]
 800048a:	fa92 f2a2 	rbit	r2, r2
 800048e:	60fa      	str	r2, [r7, #12]
  return result;
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	b2d2      	uxtb	r2, r2
 8000498:	fa03 f202 	lsl.w	r2, r3, r2
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	631a      	str	r2, [r3, #48]	; 0x30
 80004a4:	e007      	b.n	80004b6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80004b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	689a      	ldr	r2, [r3, #8]
 80004bc:	4b19      	ldr	r3, [pc, #100]	; (8000524 <HAL_ADC_Init+0x288>)
 80004be:	4013      	ands	r3, r2
 80004c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d10b      	bne.n	80004de <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d0:	f023 0303 	bic.w	r3, r3, #3
 80004d4:	f043 0201 	orr.w	r2, r3, #1
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	64da      	str	r2, [r3, #76]	; 0x4c
 80004dc:	e014      	b.n	8000508 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f023 0312 	bic.w	r3, r3, #18
 80004e6:	f043 0210 	orr.w	r2, r3, #16
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80004f2:	f043 0201 	orr.w	r2, r3, #1
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80004fa:	2301      	movs	r3, #1
 80004fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000500:	e002      	b.n	8000508 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000502:	2301      	movs	r3, #1
 8000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800050c:	4618      	mov	r0, r3
 800050e:	3738      	adds	r7, #56	; 0x38
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40023800 	.word	0x40023800
 8000518:	40012700 	.word	0x40012700
 800051c:	fcfc16ff 	.word	0xfcfc16ff
 8000520:	c0fff18d 	.word	0xc0fff18d
 8000524:	bf80fffe 	.word	0xbf80fffe

08000528 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000530:	2300      	movs	r3, #0
 8000532:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800053a:	2b01      	cmp	r3, #1
 800053c:	d101      	bne.n	8000542 <HAL_ADC_Start+0x1a>
 800053e:	2302      	movs	r3, #2
 8000540:	e04e      	b.n	80005e0 <HAL_ADC_Start+0xb8>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2201      	movs	r2, #1
 8000546:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 fa32 	bl	80009b4 <ADC_Enable>
 8000550:	4603      	mov	r3, r0
 8000552:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d141      	bne.n	80005de <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000562:	f023 0301 	bic.w	r3, r3, #1
 8000566:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000578:	2b00      	cmp	r3, #0
 800057a:	d007      	beq.n	800058c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000584:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000598:	d106      	bne.n	80005a8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800059e:	f023 0206 	bic.w	r2, r3, #6
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	651a      	str	r2, [r3, #80]	; 0x50
 80005a6:	e002      	b.n	80005ae <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80005be:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d107      	bne.n	80005de <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	689a      	ldr	r2, [r3, #8]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005dc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000604:	d113      	bne.n	800062e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000614:	d10b      	bne.n	800062e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f043 0220 	orr.w	r2, r3, #32
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e061      	b.n	80006f2 <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800062e:	f7ff fe09 	bl	8000244 <HAL_GetTick>
 8000632:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000634:	e01a      	b.n	800066c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063c:	d016      	beq.n	800066c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d007      	beq.n	8000654 <HAL_ADC_PollForConversion+0x6c>
 8000644:	f7ff fdfe 	bl	8000244 <HAL_GetTick>
 8000648:	4602      	mov	r2, r0
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	429a      	cmp	r2, r3
 8000652:	d20b      	bcs.n	800066c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000658:	f043 0204 	orr.w	r2, r3, #4
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8000668:	2303      	movs	r3, #3
 800066a:	e042      	b.n	80006f2 <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0dd      	beq.n	8000636 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d104      	bne.n	800068c <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f06f 0212 	mvn.w	r2, #18
 800068a:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000690:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d124      	bne.n	80006f0 <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d11f      	bne.n	80006f0 <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d111      	bne.n	80006f0 <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d105      	bne.n	80006f0 <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e8:	f043 0201 	orr.w	r2, r3, #1
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
	...

08000714 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800072c:	2b01      	cmp	r3, #1
 800072e:	d101      	bne.n	8000734 <HAL_ADC_ConfigChannel+0x20>
 8000730:	2302      	movs	r3, #2
 8000732:	e134      	b.n	800099e <HAL_ADC_ConfigChannel+0x28a>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	2b06      	cmp	r3, #6
 8000742:	d81c      	bhi.n	800077e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	3b05      	subs	r3, #5
 8000756:	221f      	movs	r2, #31
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	43db      	mvns	r3, r3
 800075e:	4019      	ands	r1, r3
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	4613      	mov	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	3b05      	subs	r3, #5
 8000770:	fa00 f203 	lsl.w	r2, r0, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	430a      	orrs	r2, r1
 800077a:	641a      	str	r2, [r3, #64]	; 0x40
 800077c:	e07e      	b.n	800087c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2b0c      	cmp	r3, #12
 8000784:	d81c      	bhi.n	80007c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	685a      	ldr	r2, [r3, #4]
 8000790:	4613      	mov	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	3b23      	subs	r3, #35	; 0x23
 8000798:	221f      	movs	r2, #31
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	4019      	ands	r1, r3
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	6818      	ldr	r0, [r3, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	3b23      	subs	r3, #35	; 0x23
 80007b2:	fa00 f203 	lsl.w	r2, r0, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	430a      	orrs	r2, r1
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80007be:	e05d      	b.n	800087c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	2b12      	cmp	r3, #18
 80007c6:	d81c      	bhi.n	8000802 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	3b41      	subs	r3, #65	; 0x41
 80007da:	221f      	movs	r2, #31
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	43db      	mvns	r3, r3
 80007e2:	4019      	ands	r1, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	3b41      	subs	r3, #65	; 0x41
 80007f4:	fa00 f203 	lsl.w	r2, r0, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	430a      	orrs	r2, r1
 80007fe:	639a      	str	r2, [r3, #56]	; 0x38
 8000800:	e03c      	b.n	800087c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2b18      	cmp	r3, #24
 8000808:	d81c      	bhi.n	8000844 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	3b5f      	subs	r3, #95	; 0x5f
 800081c:	221f      	movs	r2, #31
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	4019      	ands	r1, r3
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	3b5f      	subs	r3, #95	; 0x5f
 8000836:	fa00 f203 	lsl.w	r2, r0, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	430a      	orrs	r2, r1
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
 8000842:	e01b      	b.n	800087c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	3b7d      	subs	r3, #125	; 0x7d
 8000856:	221f      	movs	r2, #31
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	43db      	mvns	r3, r3
 800085e:	4019      	ands	r1, r3
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	6818      	ldr	r0, [r3, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	3b7d      	subs	r3, #125	; 0x7d
 8000870:	fa00 f203 	lsl.w	r2, r0, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	430a      	orrs	r2, r1
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b09      	cmp	r3, #9
 8000882:	d81a      	bhi.n	80008ba <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	6959      	ldr	r1, [r3, #20]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	2207      	movs	r2, #7
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	4019      	ands	r1, r3
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	6898      	ldr	r0, [r3, #8]
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4613      	mov	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	fa00 f203 	lsl.w	r2, r0, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	430a      	orrs	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	e042      	b.n	8000940 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b13      	cmp	r3, #19
 80008c0:	d81c      	bhi.n	80008fc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6919      	ldr	r1, [r3, #16]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4613      	mov	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	3b1e      	subs	r3, #30
 80008d4:	2207      	movs	r2, #7
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	4019      	ands	r1, r3
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	6898      	ldr	r0, [r3, #8]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	3b1e      	subs	r3, #30
 80008ee:	fa00 f203 	lsl.w	r2, r0, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	e021      	b.n	8000940 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b1a      	cmp	r3, #26
 8000902:	d81c      	bhi.n	800093e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68d9      	ldr	r1, [r3, #12]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	3b3c      	subs	r3, #60	; 0x3c
 8000916:	2207      	movs	r2, #7
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	4019      	ands	r1, r3
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	6898      	ldr	r0, [r3, #8]
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	3b3c      	subs	r3, #60	; 0x3c
 8000930:	fa00 f203 	lsl.w	r2, r0, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	430a      	orrs	r2, r1
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	e000      	b.n	8000940 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800093e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b10      	cmp	r3, #16
 8000946:	d003      	beq.n	8000950 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800094c:	2b11      	cmp	r3, #17
 800094e:	d121      	bne.n	8000994 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_ADC_ConfigChannel+0x294>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000958:	2b00      	cmp	r3, #0
 800095a:	d11b      	bne.n	8000994 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_ADC_ConfigChannel+0x294>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <HAL_ADC_ConfigChannel+0x294>)
 8000962:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000966:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b10      	cmp	r3, #16
 800096e:	d111      	bne.n	8000994 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_ADC_ConfigChannel+0x298>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_ADC_ConfigChannel+0x29c>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	0c9a      	lsrs	r2, r3, #18
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8000986:	e002      	b.n	800098e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	3b01      	subs	r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1f9      	bne.n	8000988 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800099c:	7bfb      	ldrb	r3, [r7, #15]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40012700 	.word	0x40012700
 80009ac:	20000008 	.word	0x20000008
 80009b0:	431bde83 	.word	0x431bde83

080009b4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ce:	2b40      	cmp	r3, #64	; 0x40
 80009d0:	d03c      	beq.n	8000a4c <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f042 0201 	orr.w	r2, r2, #1
 80009e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <ADC_Enable+0xa4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <ADC_Enable+0xa8>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	0c9a      	lsrs	r2, r3, #18
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80009f6:	e002      	b.n	80009fe <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1f9      	bne.n	80009f8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8000a04:	f7ff fc1e 	bl	8000244 <HAL_GetTick>
 8000a08:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000a0a:	e018      	b.n	8000a3e <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8000a0c:	f7ff fc1a 	bl	8000244 <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d911      	bls.n	8000a3e <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f043 0210 	orr.w	r2, r3, #16
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a2a:	f043 0201 	orr.w	r2, r3, #1
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e007      	b.n	8000a4e <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a48:	2b40      	cmp	r3, #64	; 0x40
 8000a4a:	d1df      	bne.n	8000a0c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	431bde83 	.word	0x431bde83

08000a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	; (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	; (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	; 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ff90 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff49 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be8:	f7ff ff5e 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f7ff ff90 	bl	8000b18 <NVIC_EncodePriority>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5f 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffb0 	bl	8000b7c <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c3e:	e154      	b.n	8000eea <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8146 	beq.w	8000ee4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x40>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b12      	cmp	r3, #18
 8000c66:	d123      	bne.n	8000cb0 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	08da      	lsrs	r2, r3, #3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3208      	adds	r2, #8
 8000c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	220f      	movs	r2, #15
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	691a      	ldr	r2, [r3, #16]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	6939      	ldr	r1, [r7, #16]
 8000cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0203 	and.w	r2, r3, #3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d00b      	beq.n	8000d04 <HAL_GPIO_Init+0xdc>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf8:	2b11      	cmp	r3, #17
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b12      	cmp	r3, #18
 8000d02:	d130      	bne.n	8000d66 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	f003 0201 	and.w	r2, r3, #1
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80a0 	beq.w	8000ee4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	4b57      	ldr	r3, [pc, #348]	; (8000f04 <HAL_GPIO_Init+0x2dc>)
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	4a56      	ldr	r2, [pc, #344]	; (8000f04 <HAL_GPIO_Init+0x2dc>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6213      	str	r3, [r2, #32]
 8000db0:	4b54      	ldr	r3, [pc, #336]	; (8000f04 <HAL_GPIO_Init+0x2dc>)
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000dbc:	4a52      	ldr	r2, [pc, #328]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a4a      	ldr	r2, [pc, #296]	; (8000f0c <HAL_GPIO_Init+0x2e4>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d019      	beq.n	8000e1c <HAL_GPIO_Init+0x1f4>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a49      	ldr	r2, [pc, #292]	; (8000f10 <HAL_GPIO_Init+0x2e8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1f0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <HAL_GPIO_Init+0x2ec>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1ec>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <HAL_GPIO_Init+0x2f0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1e8>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a46      	ldr	r2, [pc, #280]	; (8000f1c <HAL_GPIO_Init+0x2f4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1e4>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e008      	b.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	e006      	b.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e10:	2303      	movs	r3, #3
 8000e12:	e004      	b.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e002      	b.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	f002 0203 	and.w	r2, r2, #3
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	4093      	lsls	r3, r2
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e2e:	4936      	ldr	r1, [pc, #216]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e8a:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb4:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f47f aea3 	bne.w	8000c40 <HAL_GPIO_Init+0x18>
  } 
}
 8000efa:	bf00      	nop
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020800 	.word	0x40020800
 8000f18:	40020c00 	.word	0x40020c00
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
 8000f30:	4613      	mov	r3, r2
 8000f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f34:	787b      	ldrb	r3, [r7, #1]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000f40:	e003      	b.n	8000f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	041a      	lsls	r2, r3, #16
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	619a      	str	r2, [r3, #24]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e31d      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f66:	4b94      	ldr	r3, [pc, #592]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f70:	4b91      	ldr	r3, [pc, #580]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d07b      	beq.n	800107e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d006      	beq.n	8000f9a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b0c      	cmp	r3, #12
 8000f90:	d10f      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x5e>
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f98:	d10b      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9a:	4b87      	ldr	r3, [pc, #540]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d06a      	beq.n	800107c <HAL_RCC_OscConfig+0x128>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d166      	bne.n	800107c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e2f7      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x74>
 8000fba:	4b7f      	ldr	r3, [pc, #508]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7e      	ldr	r2, [pc, #504]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e02d      	b.n	8001024 <HAL_RCC_OscConfig+0xd0>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10c      	bne.n	8000fea <HAL_RCC_OscConfig+0x96>
 8000fd0:	4b79      	ldr	r3, [pc, #484]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a78      	ldr	r2, [pc, #480]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b76      	ldr	r3, [pc, #472]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a75      	ldr	r2, [pc, #468]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	e01c      	b.n	8001024 <HAL_RCC_OscConfig+0xd0>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0xb8>
 8000ff2:	4b71      	ldr	r3, [pc, #452]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a70      	ldr	r2, [pc, #448]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b6e      	ldr	r3, [pc, #440]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a6d      	ldr	r2, [pc, #436]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e00b      	b.n	8001024 <HAL_RCC_OscConfig+0xd0>
 800100c:	4b6a      	ldr	r3, [pc, #424]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a69      	ldr	r2, [pc, #420]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a66      	ldr	r2, [pc, #408]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff f90a 	bl	8000244 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff f906 	bl	8000244 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e2ad      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001046:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0xe0>
 8001052:	e014      	b.n	800107e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff f8f6 	bl	8000244 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff f8f2 	bl	8000244 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e299      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800106e:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x108>
 800107a:	e000      	b.n	800107e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d05a      	beq.n	8001140 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	2b04      	cmp	r3, #4
 800108e:	d005      	beq.n	800109c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2b0c      	cmp	r3, #12
 8001094:	d119      	bne.n	80010ca <HAL_RCC_OscConfig+0x176>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d116      	bne.n	80010ca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109c:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x160>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d001      	beq.n	80010b4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e276      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	493d      	ldr	r1, [pc, #244]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c8:	e03a      	b.n	8001140 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d020      	beq.n	8001114 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <HAL_RCC_OscConfig+0x268>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff f8b4 	bl	8000244 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff f8b0 	bl	8000244 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e257      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	492a      	ldr	r1, [pc, #168]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
 8001112:	e015      	b.n	8001140 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <HAL_RCC_OscConfig+0x268>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff f893 	bl	8000244 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff f88f 	bl	8000244 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e236      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001134:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80b8 	beq.w	80012be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d170      	bne.n	8001236 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_RCC_OscConfig+0x218>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e21a      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001178:	429a      	cmp	r2, r3
 800117a:	d921      	bls.n	80011c0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fba3 	bl	80018cc <RCC_SetFlashLatencyFromMSIRange>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e208      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4906      	ldr	r1, [pc, #24]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	061b      	lsls	r3, r3, #24
 80011b0:	4901      	ldr	r1, [pc, #4]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
 80011b6:	e020      	b.n	80011fa <HAL_RCC_OscConfig+0x2a6>
 80011b8:	40023800 	.word	0x40023800
 80011bc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c0:	4ba4      	ldr	r3, [pc, #656]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	49a1      	ldr	r1, [pc, #644]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d2:	4ba0      	ldr	r3, [pc, #640]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	061b      	lsls	r3, r3, #24
 80011e0:	499c      	ldr	r1, [pc, #624]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fb6e 	bl	80018cc <RCC_SetFlashLatencyFromMSIRange>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e1d3      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	0b5b      	lsrs	r3, r3, #13
 8001200:	3301      	adds	r3, #1
 8001202:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800120a:	4a92      	ldr	r2, [pc, #584]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 800120c:	6892      	ldr	r2, [r2, #8]
 800120e:	0912      	lsrs	r2, r2, #4
 8001210:	f002 020f 	and.w	r2, r2, #15
 8001214:	4990      	ldr	r1, [pc, #576]	; (8001458 <HAL_RCC_OscConfig+0x504>)
 8001216:	5c8a      	ldrb	r2, [r1, r2]
 8001218:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800121a:	4a90      	ldr	r2, [pc, #576]	; (800145c <HAL_RCC_OscConfig+0x508>)
 800121c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800121e:	4b90      	ldr	r3, [pc, #576]	; (8001460 <HAL_RCC_OscConfig+0x50c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7fe ffc2 	bl	80001ac <HAL_InitTick>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d045      	beq.n	80012be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	e1b5      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d029      	beq.n	8001292 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800123e:	4b89      	ldr	r3, [pc, #548]	; (8001464 <HAL_RCC_OscConfig+0x510>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7fe fffe 	bl	8000244 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800124c:	f7fe fffa 	bl	8000244 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1a1      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800125e:	4b7d      	ldr	r3, [pc, #500]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126a:	4b7a      	ldr	r3, [pc, #488]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4977      	ldr	r1, [pc, #476]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127c:	4b75      	ldr	r3, [pc, #468]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	061b      	lsls	r3, r3, #24
 800128a:	4972      	ldr	r1, [pc, #456]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
 8001290:	e015      	b.n	80012be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <HAL_RCC_OscConfig+0x510>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7fe ffd4 	bl	8000244 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a0:	f7fe ffd0 	bl	8000244 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e177      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012b2:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d030      	beq.n	800132c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d016      	beq.n	8001300 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d2:	4b65      	ldr	r3, [pc, #404]	; (8001468 <HAL_RCC_OscConfig+0x514>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d8:	f7fe ffb4 	bl	8000244 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e0:	f7fe ffb0 	bl	8000244 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e157      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012f2:	4b58      	ldr	r3, [pc, #352]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x38c>
 80012fe:	e015      	b.n	800132c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001300:	4b59      	ldr	r3, [pc, #356]	; (8001468 <HAL_RCC_OscConfig+0x514>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7fe ff9d 	bl	8000244 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130e:	f7fe ff99 	bl	8000244 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e140      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001320:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 8001322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80b5 	beq.w	80014a4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	4b45      	ldr	r3, [pc, #276]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b42      	ldr	r3, [pc, #264]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	4a41      	ldr	r2, [pc, #260]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6253      	str	r3, [r2, #36]	; 0x24
 8001356:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001362:	2301      	movs	r3, #1
 8001364:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b41      	ldr	r3, [pc, #260]	; (800146c <HAL_RCC_OscConfig+0x518>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d118      	bne.n	80013a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b3e      	ldr	r3, [pc, #248]	; (800146c <HAL_RCC_OscConfig+0x518>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a3d      	ldr	r2, [pc, #244]	; (800146c <HAL_RCC_OscConfig+0x518>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137e:	f7fe ff61 	bl	8000244 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001386:	f7fe ff5d 	bl	8000244 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b64      	cmp	r3, #100	; 0x64
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e104      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_RCC_OscConfig+0x518>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x466>
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80013ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b0:	4a28      	ldr	r2, [pc, #160]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6353      	str	r3, [r2, #52]	; 0x34
 80013b8:	e02d      	b.n	8001416 <HAL_RCC_OscConfig+0x4c2>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x488>
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	4a23      	ldr	r2, [pc, #140]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80013c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013cc:	6353      	str	r3, [r2, #52]	; 0x34
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80013d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d2:	4a20      	ldr	r2, [pc, #128]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80013d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013d8:	6353      	str	r3, [r2, #52]	; 0x34
 80013da:	e01c      	b.n	8001416 <HAL_RCC_OscConfig+0x4c2>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x4aa>
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ee:	6353      	str	r3, [r2, #52]	; 0x34
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	4a17      	ldr	r2, [pc, #92]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	6353      	str	r3, [r2, #52]	; 0x34
 80013fc:	e00b      	b.n	8001416 <HAL_RCC_OscConfig+0x4c2>
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 8001400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001402:	4a14      	ldr	r2, [pc, #80]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 8001404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001408:	6353      	str	r3, [r2, #52]	; 0x34
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 8001410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001414:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d015      	beq.n	800144a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7fe ff11 	bl	8000244 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001424:	e00a      	b.n	800143c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7fe ff0d 	bl	8000244 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	; 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e0b2      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_OscConfig+0x500>)
 800143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0ee      	beq.n	8001426 <HAL_RCC_OscConfig+0x4d2>
 8001448:	e023      	b.n	8001492 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7fe fefb 	bl	8000244 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001450:	e019      	b.n	8001486 <HAL_RCC_OscConfig+0x532>
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	08001e7c 	.word	0x08001e7c
 800145c:	20000008 	.word	0x20000008
 8001460:	20000000 	.word	0x20000000
 8001464:	42470020 	.word	0x42470020
 8001468:	42470680 	.word	0x42470680
 800146c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001470:	f7fe fee8 	bl	8000244 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e08d      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001486:	4b49      	ldr	r3, [pc, #292]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1ee      	bne.n	8001470 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001492:	7ffb      	ldrb	r3, [r7, #31]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d105      	bne.n	80014a4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001498:	4b44      	ldr	r3, [pc, #272]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	4a43      	ldr	r2, [pc, #268]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 800149e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d079      	beq.n	80015a0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b0c      	cmp	r3, #12
 80014b0:	d056      	beq.n	8001560 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d13b      	bne.n	8001532 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_RCC_OscConfig+0x65c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7fe fec0 	bl	8000244 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c8:	f7fe febc 	bl	8000244 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e063      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	4319      	orrs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	430b      	orrs	r3, r1
 80014fe:	492b      	ldr	r1, [pc, #172]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x65c>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7fe fe9b 	bl	8000244 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001512:	f7fe fe97 	bl	8000244 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e03e      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x5be>
 8001530:	e036      	b.n	80015a0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_RCC_OscConfig+0x65c>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7fe fe84 	bl	8000244 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7fe fe80 	bl	8000244 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e027      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x5ec>
 800155e:	e01f      	b.n	80015a0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e01a      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	429a      	cmp	r2, r3
 800157e:	d10d      	bne.n	800159c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d106      	bne.n	800159c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	42470060 	.word	0x42470060

080015b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e11a      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b8f      	ldr	r3, [pc, #572]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d919      	bls.n	800160a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x34>
 80015dc:	4b8a      	ldr	r3, [pc, #552]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a89      	ldr	r2, [pc, #548]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b87      	ldr	r3, [pc, #540]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 0201 	bic.w	r2, r3, #1
 80015f0:	4985      	ldr	r1, [pc, #532]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f8:	4b83      	ldr	r3, [pc, #524]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d001      	beq.n	800160a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0f9      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d008      	beq.n	8001628 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001616:	4b7d      	ldr	r3, [pc, #500]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	497a      	ldr	r1, [pc, #488]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 808e 	beq.w	8001752 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d121      	bne.n	800168e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0d7      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001656:	4b6d      	ldr	r3, [pc, #436]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d115      	bne.n	800168e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0cb      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800166e:	4b67      	ldr	r3, [pc, #412]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0bf      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0b7      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	495c      	ldr	r1, [pc, #368]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7fe fdd0 	bl	8000244 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d112      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7fe fdc8 	bl	8000244 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e09b      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d1ee      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xfc>
 80016d2:	e03e      	b.n	8001752 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d112      	bne.n	8001702 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016de:	f7fe fdb1 	bl	8000244 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e084      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f4:	4b45      	ldr	r3, [pc, #276]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_ClockConfig+0x12a>
 8001700:	e027      	b.n	8001752 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d11d      	bne.n	8001746 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7fe fd9a 	bl	8000244 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e06d      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001722:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d1ee      	bne.n	800170c <HAL_RCC_ClockConfig+0x158>
 800172e:	e010      	b.n	8001752 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7fe fd88 	bl	8000244 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e05b      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001746:	4b31      	ldr	r3, [pc, #196]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ee      	bne.n	8001730 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d219      	bcs.n	8001794 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d105      	bne.n	8001772 <HAL_RCC_ClockConfig+0x1be>
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a27      	ldr	r2, [pc, #156]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 0201 	bic.w	r2, r3, #1
 800177a:	4923      	ldr	r1, [pc, #140]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e034      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4917      	ldr	r1, [pc, #92]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	490f      	ldr	r1, [pc, #60]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d2:	f000 f823 	bl	800181c <HAL_RCC_GetSysClockFreq>
 80017d6:	4601      	mov	r1, r0
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_RCC_ClockConfig+0x25c>)
 80017e4:	5cd3      	ldrb	r3, [r2, r3]
 80017e6:	fa21 f303 	lsr.w	r3, r1, r3
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_RCC_ClockConfig+0x260>)
 80017ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x264>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fcda 	bl	80001ac <HAL_InitTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80017fc:	7afb      	ldrb	r3, [r7, #11]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00
 800180c:	40023800 	.word	0x40023800
 8001810:	08001e7c 	.word	0x08001e7c
 8001814:	20000008 	.word	0x20000008
 8001818:	20000000 	.word	0x20000000

0800181c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b08      	cmp	r3, #8
 8001830:	d006      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x24>
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d007      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x2a>
 8001836:	2b04      	cmp	r3, #4
 8001838:	d12c      	bne.n	8001894 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800183c:	613b      	str	r3, [r7, #16]
      break;
 800183e:	e037      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001842:	613b      	str	r3, [r7, #16]
      break;
 8001844:	e034      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	0c9b      	lsrs	r3, r3, #18
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	0d9b      	lsrs	r3, r3, #22
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	3301      	adds	r3, #1
 800185e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001870:	fb02 f203 	mul.w	r2, r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e007      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001882:	fb02 f203 	mul.w	r2, r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	613b      	str	r3, [r7, #16]
      break;
 8001892:	e00d      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	0b5b      	lsrs	r3, r3, #13
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	613b      	str	r3, [r7, #16]
      break;
 80018ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b0:	693b      	ldr	r3, [r7, #16]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40023800 	.word	0x40023800
 80018c0:	00f42400 	.word	0x00f42400
 80018c4:	007a1200 	.word	0x007a1200
 80018c8:	08001e70 	.word	0x08001e70

080018cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80018d8:	4b29      	ldr	r3, [pc, #164]	; (8001980 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d12c      	bne.n	800193e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018e4:	4b26      	ldr	r3, [pc, #152]	; (8001980 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e016      	b.n	800192a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001906:	6253      	str	r3, [r2, #36]	; 0x24
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800191c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	4a17      	ldr	r2, [pc, #92]	; (8001980 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001928:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001930:	d105      	bne.n	800193e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001938:	d101      	bne.n	800193e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800193a:	2301      	movs	r3, #1
 800193c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 0201 	bic.w	r2, r3, #1
 8001958:	490b      	ldr	r1, [pc, #44]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40007000 	.word	0x40007000
 8001988:	40023c00 	.word	0x40023c00

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001990:	f7fe fbf4 	bl	800017c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 f842 	bl	8001a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f000 f8e4 	bl	8001b64 <MX_GPIO_Init>
  MX_ADC_Init();
 800199c:	f000 f88a 	bl	8001ab4 <MX_ADC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc);
 80019a0:	481b      	ldr	r0, [pc, #108]	; (8001a10 <main+0x84>)
 80019a2:	f7fe fdc1 	bl	8000528 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80019a6:	f04f 31ff 	mov.w	r1, #4294967295
 80019aa:	4819      	ldr	r0, [pc, #100]	; (8001a10 <main+0x84>)
 80019ac:	f7fe fe1c 	bl	80005e8 <HAL_ADC_PollForConversion>
	  adcValue = HAL_ADC_GetValue(&hadc);
 80019b0:	4817      	ldr	r0, [pc, #92]	; (8001a10 <main+0x84>)
 80019b2:	f7fe fea2 	bl	80006fa <HAL_ADC_GetValue>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <main+0x88>)
 80019bc:	801a      	strh	r2, [r3, #0]
	  if(adcValue > PRESSURE_THRESHOLD)
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <main+0x88>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80019c6:	d910      	bls.n	80019ea <main+0x5e>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80019c8:	2201      	movs	r2, #1
 80019ca:	2120      	movs	r1, #32
 80019cc:	4812      	ldr	r0, [pc, #72]	; (8001a18 <main+0x8c>)
 80019ce:	f7ff faa9 	bl	8000f24 <HAL_GPIO_WritePin>
		  HAL_Delay(PRESSURE_DELAY);
 80019d2:	2063      	movs	r0, #99	; 0x63
 80019d4:	f7fe fc40 	bl	8000258 <HAL_Delay>
		  HAL_Delay(PRESSURE_DELAY);
 80019d8:	2063      	movs	r0, #99	; 0x63
 80019da:	f7fe fc3d 	bl	8000258 <HAL_Delay>
		  HAL_Delay(PRESSURE_DELAY);
 80019de:	2063      	movs	r0, #99	; 0x63
 80019e0:	f7fe fc3a 	bl	8000258 <HAL_Delay>
		  HAL_Delay(PRESSURE_DELAY);
 80019e4:	2063      	movs	r0, #99	; 0x63
 80019e6:	f7fe fc37 	bl	8000258 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2120      	movs	r1, #32
 80019ee:	480a      	ldr	r0, [pc, #40]	; (8001a18 <main+0x8c>)
 80019f0:	f7ff fa98 	bl	8000f24 <HAL_GPIO_WritePin>
	  HAL_Delay(PRESSURE_DELAY);
 80019f4:	2063      	movs	r0, #99	; 0x63
 80019f6:	f7fe fc2f 	bl	8000258 <HAL_Delay>
	  HAL_Delay(PRESSURE_DELAY);
 80019fa:	2063      	movs	r0, #99	; 0x63
 80019fc:	f7fe fc2c 	bl	8000258 <HAL_Delay>
	  HAL_Delay(PRESSURE_DELAY);
 8001a00:	2063      	movs	r0, #99	; 0x63
 8001a02:	f7fe fc29 	bl	8000258 <HAL_Delay>
	  HAL_Delay(PRESSURE_DELAY);
 8001a06:	2063      	movs	r0, #99	; 0x63
 8001a08:	f7fe fc26 	bl	8000258 <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 8001a0c:	e7c8      	b.n	80019a0 <main+0x14>
 8001a0e:	bf00      	nop
 8001a10:	20000030 	.word	0x20000030
 8001a14:	2000002c 	.word	0x2000002c
 8001a18:	40020400 	.word	0x40020400

08001a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b092      	sub	sp, #72	; 0x48
 8001a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	2234      	movs	r2, #52	; 0x34
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 fa0c 	bl	8001e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <SystemClock_Config+0x94>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001a46:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <SystemClock_Config+0x94>)
 8001a48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a4c:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001a4e:	2312      	movs	r3, #18
 8001a50:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a52:	2301      	movs	r3, #1
 8001a54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a56:	2310      	movs	r3, #16
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001a62:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fa6f 	bl	8000f54 <HAL_RCC_OscConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001a7c:	f000 f8c8 	bl	8001c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a80:	230f      	movs	r3, #15
 8001a82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fd8b 	bl	80015b4 <HAL_RCC_ClockConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001aa4:	f000 f8b4 	bl	8001c10 <Error_Handler>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3748      	adds	r7, #72	; 0x48
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001ac6:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <MX_ADC_Init+0xac>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001b12:	2210      	movs	r2, #16
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001b24:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001b26:	f7fe fbb9 	bl	800029c <HAL_ADC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001b30:	f000 f86e 	bl	8001c10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b34:	2304      	movs	r3, #4
 8001b36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_ADC_Init+0xa8>)
 8001b46:	f7fe fde5 	bl	8000714 <HAL_ADC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001b50:	f000 f85e 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000030 	.word	0x20000030
 8001b60:	40012400 	.word	0x40012400

08001b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001b98:	f043 0320 	orr.w	r3, r3, #32
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	61d3      	str	r3, [r2, #28]
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	61d3      	str	r3, [r2, #28]
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_GPIO_Init+0xa4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2120      	movs	r1, #32
 8001bde:	480b      	ldr	r0, [pc, #44]	; (8001c0c <MX_GPIO_Init+0xa8>)
 8001be0:	f7ff f9a0 	bl	8000f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001be4:	2320      	movs	r3, #32
 8001be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_GPIO_Init+0xa8>)
 8001bfc:	f7ff f814 	bl	8000c28 <HAL_GPIO_Init>

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020400 	.word	0x40020400

08001c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_MspInit+0x58>)
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <HAL_MspInit+0x58>)
 8001c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c2c:	6253      	str	r3, [r2, #36]	; 0x24
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_MspInit+0x58>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_MspInit+0x58>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_MspInit+0x58>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_MspInit+0x58>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_MspInit+0x58>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_MspInit+0x58>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6253      	str	r3, [r2, #36]	; 0x24
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_MspInit+0x58>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a15      	ldr	r2, [pc, #84]	; (8001cec <HAL_ADC_MspInit+0x74>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d123      	bne.n	8001ce2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	61d3      	str	r3, [r2, #28]
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cca:	2310      	movs	r3, #16
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <HAL_ADC_MspInit+0x7c>)
 8001cde:	f7fe ffa3 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40012400 	.word	0x40012400
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <HardFault_Handler+0x4>

08001d0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <MemManage_Handler+0x4>

08001d10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <BusFault_Handler+0x4>

08001d16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <UsageFault_Handler+0x4>

08001d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d44:	f7fe fa6c 	bl	8000220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <SystemInit+0x5c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <SystemInit+0x5c>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <SystemInit+0x5c>)
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	4911      	ldr	r1, [pc, #68]	; (8001da8 <SystemInit+0x5c>)
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <SystemInit+0x60>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <SystemInit+0x5c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <SystemInit+0x5c>)
 8001d6e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001d72:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001d76:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <SystemInit+0x5c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <SystemInit+0x5c>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d82:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <SystemInit+0x5c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <SystemInit+0x5c>)
 8001d8a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001d8e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <SystemInit+0x5c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <SystemInit+0x64>)
 8001d98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d9c:	609a      	str	r2, [r3, #8]
#endif
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	88ffc00c 	.word	0x88ffc00c
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001db4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001db6:	e003      	b.n	8001dc0 <LoopCopyDataInit>

08001db8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dbe:	3104      	adds	r1, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001dc0:	480a      	ldr	r0, [pc, #40]	; (8001dec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001dc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001dc8:	d3f6      	bcc.n	8001db8 <CopyDataInit>
  ldr r2, =_sbss
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001dcc:	e002      	b.n	8001dd4 <LoopFillZerobss>

08001dce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001dd0:	f842 3b04 	str.w	r3, [r2], #4

08001dd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001dd8:	d3f9      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dda:	f7ff ffb7 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f000 f80f 	bl	8001e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de2:	f7ff fdd3 	bl	800198c <main>
  bx lr
 8001de6:	4770      	bx	lr
  ldr r3, =_sidata
 8001de8:	08001e94 	.word	0x08001e94
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001df0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001df4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001df8:	20000084 	.word	0x20000084

08001dfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC1_IRQHandler>
	...

08001e00 <__libc_init_array>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	2500      	movs	r5, #0
 8001e04:	4e0c      	ldr	r6, [pc, #48]	; (8001e38 <__libc_init_array+0x38>)
 8001e06:	4c0d      	ldr	r4, [pc, #52]	; (8001e3c <__libc_init_array+0x3c>)
 8001e08:	1ba4      	subs	r4, r4, r6
 8001e0a:	10a4      	asrs	r4, r4, #2
 8001e0c:	42a5      	cmp	r5, r4
 8001e0e:	d109      	bne.n	8001e24 <__libc_init_array+0x24>
 8001e10:	f000 f822 	bl	8001e58 <_init>
 8001e14:	2500      	movs	r5, #0
 8001e16:	4e0a      	ldr	r6, [pc, #40]	; (8001e40 <__libc_init_array+0x40>)
 8001e18:	4c0a      	ldr	r4, [pc, #40]	; (8001e44 <__libc_init_array+0x44>)
 8001e1a:	1ba4      	subs	r4, r4, r6
 8001e1c:	10a4      	asrs	r4, r4, #2
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	d105      	bne.n	8001e2e <__libc_init_array+0x2e>
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
 8001e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e28:	4798      	blx	r3
 8001e2a:	3501      	adds	r5, #1
 8001e2c:	e7ee      	b.n	8001e0c <__libc_init_array+0xc>
 8001e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e32:	4798      	blx	r3
 8001e34:	3501      	adds	r5, #1
 8001e36:	e7f2      	b.n	8001e1e <__libc_init_array+0x1e>
 8001e38:	08001e8c 	.word	0x08001e8c
 8001e3c:	08001e8c 	.word	0x08001e8c
 8001e40:	08001e8c 	.word	0x08001e8c
 8001e44:	08001e90 	.word	0x08001e90

08001e48 <memset>:
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4402      	add	r2, r0
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d100      	bne.n	8001e52 <memset+0xa>
 8001e50:	4770      	bx	lr
 8001e52:	f803 1b01 	strb.w	r1, [r3], #1
 8001e56:	e7f9      	b.n	8001e4c <memset+0x4>

08001e58 <_init>:
 8001e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5a:	bf00      	nop
 8001e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5e:	bc08      	pop	{r3}
 8001e60:	469e      	mov	lr, r3
 8001e62:	4770      	bx	lr

08001e64 <_fini>:
 8001e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e66:	bf00      	nop
 8001e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e6a:	bc08      	pop	{r3}
 8001e6c:	469e      	mov	lr, r3
 8001e6e:	4770      	bx	lr
